{"ast":null,"code":"var _jsxFileName = \"/workspaces/gymnasiearbete/src/components/SpotifyFetch.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpotifyFetch = () => {\n  _s();\n  const [trackDetails, setTrackDetails] = useState(null); // Tillståndsvariabel för låtinformation\n  const [accessToken, setAccessToken] = useState(null); // Tillståndsvariabel för åtkomsttoken\n\n  useEffect(() => {\n    // Funktion för att hämta åtkomsttoken från Spotifys API\n    const fetchAccessToken = async () => {\n      try {\n        // Steg 1: Hämta åtkomsttoken från Spotifys API\n        const tokenResponse = await fetch(\"https://accounts.spotify.com/api/token\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            Authorization: \"Basic \" + btoa(\"2996a4789f6c4508a187d42e86df6eac:eae403656d5d4b4cb324745279a224e1\")\n          },\n          body: \"grant_type=client_credentials\"\n        });\n\n        // Steg 2: Kontrollera om svaret är OK\n        if (!tokenResponse.ok) {\n          console.error(\"Failed to fetch access token\"); // Logga felmeddelande om det inte är OK\n          return; // Avsluta funktionen om det inte är OK\n        }\n\n        // Steg 3: Omvandla svaret till JSON och spara åtkomsttokenen\n        const accessTokenData = await tokenResponse.json();\n        setAccessToken(accessTokenData.access_token); // Uppdatera tillståndet med åtkomsttokenen\n      } catch (error) {\n        console.error(\"Error fetching access token:\", error); // Logga felmeddelandet om något fel uppstår\n      }\n    };\n\n    // Funktion för att hämta låtinformation med den hämtade åtkomsttokenen\n    const fetchTrackDetails = async () => {\n      try {\n        // Steg 1: Hämta information om en specifik låt från Spotifys API med den hämtade åtkomsttokenen\n        const trackId = \"5VC29kHMkzcaorzPKUqJbl\";\n        const response = await fetch(\"https://api.spotify.com/v1/tracks/\".concat(trackId), {\n          method: \"GET\",\n          headers: {\n            Authorization: \"Bearer \".concat(accessToken) // Använd åtkomsttokenen i autentiseringsheaderen\n          }\n        });\n\n        // Steg 2: Kontrollera om svaret för låtinformation är OK\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch track details\"); // Kasta ett fel om det inte är OK\n        }\n\n        // Steg 3: Omvandla svaret för låtinformation till JSON och spara låtinformationen\n        const data = await response.json();\n        setTrackDetails(data); // Uppdatera tillståndet med låtinformationen\n      } catch (error) {\n        console.error(\"Error fetching track details:\", error); // Logga felmeddelandet om något fel uppstår\n      }\n    };\n    fetchAccessToken(); // Anropa funktionen för att hämta åtkomsttokenen när komponenten renderas\n  }, []);\n  useEffect(() => {\n    // Anropa funktionen för att hämta låtinformation när åtkomsttokenen ändras\n    if (accessToken) {\n      fetchTrackDetails();\n    }\n  }, [accessToken]); // Anropa funktionen när accessToken-tillståndet ändras\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: trackDetails &&\n    /*#__PURE__*/\n    // Visa låtinformationen om den finns tillgänglig\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Track Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Title: \", trackDetails.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Artist: \", trackDetails.artists[0].name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Album: \", trackDetails.album.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"AccessToken: \", accessToken]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(SpotifyFetch, \"p3Q2JNuuz3+qDITECCdlHMZk+ZU=\");\n_c = SpotifyFetch;\nexport default SpotifyFetch;\nvar _c;\n$RefreshReg$(_c, \"SpotifyFetch\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SpotifyFetch","_s","trackDetails","setTrackDetails","accessToken","setAccessToken","fetchAccessToken","tokenResponse","fetch","method","headers","Authorization","btoa","body","ok","console","error","accessTokenData","json","access_token","fetchTrackDetails","trackId","response","concat","Error","data","children","fileName","_jsxFileName","lineNumber","columnNumber","name","artists","album","_c","$RefreshReg$"],"sources":["/workspaces/gymnasiearbete/src/components/SpotifyFetch.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst SpotifyFetch = () => {\r\n  const [trackDetails, setTrackDetails] = useState(null); // Tillståndsvariabel för låtinformation\r\n  const [accessToken, setAccessToken] = useState(null); // Tillståndsvariabel för åtkomsttoken\r\n\r\n  useEffect(() => {\r\n    // Funktion för att hämta åtkomsttoken från Spotifys API\r\n    const fetchAccessToken = async () => {\r\n      try {\r\n        // Steg 1: Hämta åtkomsttoken från Spotifys API\r\n        const tokenResponse = await fetch(\r\n          \"https://accounts.spotify.com/api/token\",\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n              Authorization:\r\n                \"Basic \" +\r\n                btoa(\r\n                  \"2996a4789f6c4508a187d42e86df6eac:eae403656d5d4b4cb324745279a224e1\",\r\n                ),\r\n            },\r\n            body: \"grant_type=client_credentials\",\r\n          },\r\n        );\r\n\r\n        // Steg 2: Kontrollera om svaret är OK\r\n        if (!tokenResponse.ok) {\r\n          console.error(\"Failed to fetch access token\"); // Logga felmeddelande om det inte är OK\r\n          return; // Avsluta funktionen om det inte är OK\r\n        }\r\n\r\n        // Steg 3: Omvandla svaret till JSON och spara åtkomsttokenen\r\n        const accessTokenData = await tokenResponse.json();\r\n        setAccessToken(accessTokenData.access_token); // Uppdatera tillståndet med åtkomsttokenen\r\n      } catch (error) {\r\n        console.error(\"Error fetching access token:\", error); // Logga felmeddelandet om något fel uppstår\r\n      }\r\n    };\r\n\r\n    // Funktion för att hämta låtinformation med den hämtade åtkomsttokenen\r\n    const fetchTrackDetails = async () => {\r\n      try {\r\n        // Steg 1: Hämta information om en specifik låt från Spotifys API med den hämtade åtkomsttokenen\r\n        const trackId = \"5VC29kHMkzcaorzPKUqJbl\";\r\n        const response = await fetch(\r\n          `https://api.spotify.com/v1/tracks/${trackId}`,\r\n          {\r\n            method: \"GET\",\r\n            headers: {\r\n              Authorization: `Bearer ${accessToken}`, // Använd åtkomsttokenen i autentiseringsheaderen\r\n            },\r\n          },\r\n        );\r\n\r\n        // Steg 2: Kontrollera om svaret för låtinformation är OK\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch track details\"); // Kasta ett fel om det inte är OK\r\n        }\r\n\r\n        // Steg 3: Omvandla svaret för låtinformation till JSON och spara låtinformationen\r\n        const data = await response.json();\r\n        setTrackDetails(data); // Uppdatera tillståndet med låtinformationen\r\n      } catch (error) {\r\n        console.error(\"Error fetching track details:\", error); // Logga felmeddelandet om något fel uppstår\r\n      }\r\n    };\r\n\r\n    fetchAccessToken(); // Anropa funktionen för att hämta åtkomsttokenen när komponenten renderas\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Anropa funktionen för att hämta låtinformation när åtkomsttokenen ändras\r\n    if (accessToken) {\r\n      fetchTrackDetails();\r\n    }\r\n  }, [accessToken]); // Anropa funktionen när accessToken-tillståndet ändras\r\n\r\n  return (\r\n    <div>\r\n      {trackDetails && ( // Visa låtinformationen om den finns tillgänglig\r\n        <div>\r\n          <h3>Track Details</h3>\r\n          <p>Title: {trackDetails.name}</p>\r\n          <p>Artist: {trackDetails.artists[0].name}</p>\r\n          <p>Album: {trackDetails.album.name}</p>\r\n          <p>AccessToken: {accessToken}</p>\r\n          {/* Visa övriga detaljer om låten om det behövs */}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpotifyFetch;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}