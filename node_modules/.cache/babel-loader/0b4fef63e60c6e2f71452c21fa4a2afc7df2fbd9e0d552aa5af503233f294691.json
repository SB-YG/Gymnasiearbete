{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nexport default function AccessToken() {\n  _s();\n  const [accessToken, setAccessToken] = useState(null); // Tillståndsvariabel för att lagra åtkomsttoken\n\n  const fetchAccessToken = async () => {\n    try {\n      const response = await fetch(\"https://accounts.spotify.com/api/token\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n          Authorization: \"Basic \" + btoa(\"2996a4789f6c4508a187d42e86df6eac:eae403656d5d4b4cb324745279a224e1\")\n        },\n        body: \"grant_type=client_credentials\"\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch access token\");\n      }\n      const data = await response.json();\n      // Uppdatera tillståndsvariabeln med åtkomsttoken\n      setAccessToken(data.access_token);\n    } catch (error) {\n      console.error(\"Error fetching access token:\", error);\n    }\n  };\n\n  // Anropa fetchAccessToken när komponenten mountar\n  useEffect(() => {\n    fetchAccessToken();\n  }, []); // Tom array för att köra effekten bara en gång vid mount\n\n  // Återge ingenting eller bara använd `accessToken`-variabeln för annat innehåll i komponenten\n  return null;\n}\n_s(AccessToken, \"/xrtmJPCXv3vYgXhoOEInGM3amE=\");\n_c = AccessToken;\nvar _c;\n$RefreshReg$(_c, \"AccessToken\");","map":{"version":3,"names":["React","useState","useEffect","AccessToken","_s","accessToken","setAccessToken","fetchAccessToken","response","fetch","method","headers","Authorization","btoa","body","ok","Error","data","json","access_token","error","console","_c","$RefreshReg$"],"sources":["/workspaces/gymnasiearbete/src/components/fetch/AccessToken.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nexport default function AccessToken() {\r\n  const [accessToken, setAccessToken] = useState(null); // Tillståndsvariabel för att lagra åtkomsttoken\r\n\r\n  const fetchAccessToken = async () => {\r\n    try {\r\n      const response = await fetch(\"https://accounts.spotify.com/api/token\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n          Authorization:\r\n            \"Basic \" +\r\n            btoa(\r\n              \"2996a4789f6c4508a187d42e86df6eac:eae403656d5d4b4cb324745279a224e1\",\r\n            ),\r\n        },\r\n        body: \"grant_type=client_credentials\",\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch access token\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      // Uppdatera tillståndsvariabeln med åtkomsttoken\r\n      setAccessToken(data.access_token);\r\n    } catch (error) {\r\n      console.error(\"Error fetching access token:\", error);\r\n    }\r\n  };\r\n\r\n  // Anropa fetchAccessToken när komponenten mountar\r\n  useEffect(() => {\r\n    fetchAccessToken();\r\n  }, []); // Tom array för att köra effekten bara en gång vid mount\r\n\r\n  // Återge ingenting eller bara använd `accessToken`-variabeln för annat innehåll i komponenten\r\n  return null;\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,eAAe,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACpC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEtD,MAAMM,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwC,EAAE;QACrEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,mCAAmC;UACnDC,aAAa,EACX,QAAQ,GACRC,IAAI,CACF,mEACF;QACJ,CAAC;QACDC,IAAI,EAAE;MACR,CAAC,CAAC;MAEF,IAAI,CAACN,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;MACjD;MAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClC;MACAZ,cAAc,CAACW,IAAI,CAACE,YAAY,CAAC;IACnC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;;EAED;EACAlB,SAAS,CAAC,MAAM;IACdK,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,OAAO,IAAI;AACb;AAACH,EAAA,CArCuBD,WAAW;AAAAmB,EAAA,GAAXnB,WAAW;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}