{"ast":null,"code":"var _jsxFileName = \"/workspaces/gymnasiearbete/src/components/ArtistInfo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ArtistInfo = () => {\n  _s();\n  // Tillstånd för att lagra artistinformation\n  const [artistData, setArtistData] = useState(null);\n  useEffect(() => {\n    // Funktion för att hämta artistinformation\n    const fetchArtistInfo = async () => {\n      try {\n        // Gör en GET-begäran till Spotifys API för den angivna artisten\n        const response = await fetch(\"https://api.spotify.com/v1/artists/53XhwfbYqKCa1cC15pYq2q\");\n\n        // Konvertera svaret till JSON-format\n        const data = await response.json();\n\n        // Sätt artistinformationen i tillståndet\n        setArtistData(data);\n      } catch (error) {\n        console.error(\"Error fetching artist data:\", error);\n      }\n    };\n\n    // Anropa funktionen för att hämta artistinformation när komponenten monteras\n    fetchArtistInfo();\n  }, []); // Använd en tom beroended array för att se till att detta bara körs en gång vid montering\n\n  // Visa artistinformationen i JSX-format\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Artist Information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), artistData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Artist Name: \", artistData.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Followers: \", artistData.followers.total]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Genres: \", artistData.genres.join(\", \")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(ArtistInfo, \"AnzJk2ycShkLghNhpRSoHHFZnZ4=\");\n_c = ArtistInfo;\nexport default ArtistInfo;\nvar _c;\n$RefreshReg$(_c, \"ArtistInfo\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ArtistInfo","_s","artistData","setArtistData","fetchArtistInfo","response","fetch","data","json","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","name","followers","total","genres","join","_c","$RefreshReg$"],"sources":["/workspaces/gymnasiearbete/src/components/ArtistInfo.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst ArtistInfo = () => {\r\n  // Tillstånd för att lagra artistinformation\r\n  const [artistData, setArtistData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Funktion för att hämta artistinformation\r\n    const fetchArtistInfo = async () => {\r\n      try {\r\n        // Gör en GET-begäran till Spotifys API för den angivna artisten\r\n        const response = await fetch(\r\n          \"https://api.spotify.com/v1/artists/53XhwfbYqKCa1cC15pYq2q\",\r\n        );\r\n\r\n        // Konvertera svaret till JSON-format\r\n        const data = await response.json();\r\n\r\n        // Sätt artistinformationen i tillståndet\r\n        setArtistData(data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching artist data:\", error);\r\n      }\r\n    };\r\n\r\n    // Anropa funktionen för att hämta artistinformation när komponenten monteras\r\n    fetchArtistInfo();\r\n  }, []); // Använd en tom beroended array för att se till att detta bara körs en gång vid montering\r\n\r\n  // Visa artistinformationen i JSX-format\r\n  return (\r\n    <div>\r\n      <h2>Artist Information</h2>\r\n      {artistData && (\r\n        <div>\r\n          <p>Artist Name: {artistData.name}</p>\r\n          <p>Followers: {artistData.followers.total}</p>\r\n          <p>Genres: {artistData.genres.join(\", \")}</p>\r\n          {/* Lägg till fler fält här beroende på den information du vill visa */}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ArtistInfo;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAElDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMO,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,2DACF,CAAC;;QAED;QACA,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;QAElC;QACAL,aAAa,CAACI,IAAI,CAAC;MACrB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC;;IAED;IACAL,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,oBACEL,OAAA;IAAAY,QAAA,gBACEZ,OAAA;MAAAY,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC1Bb,UAAU,iBACTH,OAAA;MAAAY,QAAA,gBACEZ,OAAA;QAAAY,QAAA,GAAG,eAAa,EAACT,UAAU,CAACc,IAAI;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrChB,OAAA;QAAAY,QAAA,GAAG,aAAW,EAACT,UAAU,CAACe,SAAS,CAACC,KAAK;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC9ChB,OAAA;QAAAY,QAAA,GAAG,UAAQ,EAACT,UAAU,CAACiB,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC;MAAA;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAE1C,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACd,EAAA,CAzCID,UAAU;AAAAqB,EAAA,GAAVrB,UAAU;AA2ChB,eAAeA,UAAU;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}