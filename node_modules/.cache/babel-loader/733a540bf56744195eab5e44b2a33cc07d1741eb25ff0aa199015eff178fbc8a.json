{"ast":null,"code":"var _jsxFileName = \"/workspaces/gymnasiearbete/src/pages/Song.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SongDetails = () => {\n  _s();\n  // Använd useParams för att extrahera ID:et från URL:en\n  const {\n    id\n  } = useParams();\n\n  // State för att lagra sånginformation\n  const [songData, setSongData] = useState(null);\n\n  // Exempeldata för sånger (ersätt detta med riktig datahantering)\n  const songDatabase = {\n    1: {\n      title: \"Song 1\",\n      artist: \"Artist 1\",\n      album: \"Album 1\"\n    },\n    2: {\n      title: \"Song 2\",\n      artist: \"Artist 2\",\n      album: \"Album 2\"\n    },\n    3: {\n      title: \"Song 3\",\n      artist: \"Artist 3\",\n      album: \"Album 3\"\n    }\n  };\n\n  // Funktion för att hämta sånginformation baserat på ID:et\n  const fetchSongData = () => {\n    // Simulera ett API-anrop med en timeout\n    setTimeout(() => {\n      // Hämta sånginformation från songDatabase med hjälp av det extraherade ID:et\n      const data = songDatabase[id];\n      // Uppdatera state med sånginformationen\n      setSongData(data);\n    }, 1000); // Simulera en fördröjning på 1 sekund\n  };\n\n  // Använd useEffect-hooket för att hämta sånginformation när komponenten mountas eller när ID:et ändras\n  useEffect(() => {\n    fetchSongData();\n  }, [id]);\n\n  // Rendera sånginformationen när den har hämtats\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Song Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), songData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Title: \", songData.title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Artist: \", songData.artist]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Album: \", songData.album]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(SongDetails, \"9oI0rJaeCUzzl3nTwnWgj4im3NQ=\", false, function () {\n  return [useParams];\n});\n_c = SongDetails;\nexport default SongDetails;\nvar _c;\n$RefreshReg$(_c, \"SongDetails\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","SongDetails","_s","id","songData","setSongData","songDatabase","title","artist","album","fetchSongData","setTimeout","data","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspaces/gymnasiearbete/src/pages/Song.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst SongDetails = () => {\r\n  // Använd useParams för att extrahera ID:et från URL:en\r\n  const { id } = useParams();\r\n\r\n  // State för att lagra sånginformation\r\n  const [songData, setSongData] = useState(null);\r\n\r\n  // Exempeldata för sånger (ersätt detta med riktig datahantering)\r\n  const songDatabase = {\r\n    1: { title: \"Song 1\", artist: \"Artist 1\", album: \"Album 1\" },\r\n    2: { title: \"Song 2\", artist: \"Artist 2\", album: \"Album 2\" },\r\n    3: { title: \"Song 3\", artist: \"Artist 3\", album: \"Album 3\" },\r\n  };\r\n\r\n  // Funktion för att hämta sånginformation baserat på ID:et\r\n  const fetchSongData = () => {\r\n    // Simulera ett API-anrop med en timeout\r\n    setTimeout(() => {\r\n      // Hämta sånginformation från songDatabase med hjälp av det extraherade ID:et\r\n      const data = songDatabase[id];\r\n      // Uppdatera state med sånginformationen\r\n      setSongData(data);\r\n    }, 1000); // Simulera en fördröjning på 1 sekund\r\n  };\r\n\r\n  // Använd useEffect-hooket för att hämta sånginformation när komponenten mountas eller när ID:et ändras\r\n  useEffect(() => {\r\n    fetchSongData();\r\n  }, [id]);\r\n\r\n  // Rendera sånginformationen när den har hämtats\r\n  return (\r\n    <div>\r\n      <h2>Song Details</h2>\r\n      {songData ? (\r\n        <div>\r\n          <p>Title: {songData.title}</p>\r\n          <p>Artist: {songData.artist}</p>\r\n          <p>Album: {songData.album}</p>\r\n        </div>\r\n      ) : (\r\n        <p>Loading...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SongDetails;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB;EACA,MAAM;IAAEC;EAAG,CAAC,GAAGL,SAAS,CAAC,CAAC;;EAE1B;EACA,MAAM,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAE9C;EACA,MAAMU,YAAY,GAAG;IACnB,CAAC,EAAE;MAAEC,KAAK,EAAE,QAAQ;MAAEC,MAAM,EAAE,UAAU;MAAEC,KAAK,EAAE;IAAU,CAAC;IAC5D,CAAC,EAAE;MAAEF,KAAK,EAAE,QAAQ;MAAEC,MAAM,EAAE,UAAU;MAAEC,KAAK,EAAE;IAAU,CAAC;IAC5D,CAAC,EAAE;MAAEF,KAAK,EAAE,QAAQ;MAAEC,MAAM,EAAE,UAAU;MAAEC,KAAK,EAAE;IAAU;EAC7D,CAAC;;EAED;EACA,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1B;IACAC,UAAU,CAAC,MAAM;MACf;MACA,MAAMC,IAAI,GAAGN,YAAY,CAACH,EAAE,CAAC;MAC7B;MACAE,WAAW,CAACO,IAAI,CAAC;IACnB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACZ,CAAC;;EAED;EACAf,SAAS,CAAC,MAAM;IACda,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACP,EAAE,CAAC,CAAC;;EAER;EACA,oBACEH,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACpBb,QAAQ,gBACPJ,OAAA;MAAAa,QAAA,gBACEb,OAAA;QAAAa,QAAA,GAAG,SAAO,EAACT,QAAQ,CAACG,KAAK;MAAA;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC9BjB,OAAA;QAAAa,QAAA,GAAG,UAAQ,EAACT,QAAQ,CAACI,MAAM;MAAA;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChCjB,OAAA;QAAAa,QAAA,GAAG,SAAO,EAACT,QAAQ,CAACK,KAAK;MAAA;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC,gBAENjB,OAAA;MAAAa,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACjB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACf,EAAA,CA7CID,WAAW;EAAA,QAEAH,SAAS;AAAA;AAAAoB,EAAA,GAFpBjB,WAAW;AA+CjB,eAAeA,WAAW;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}